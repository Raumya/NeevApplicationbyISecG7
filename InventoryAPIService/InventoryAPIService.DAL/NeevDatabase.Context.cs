//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.RestAPI.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class NeevDatabaseContainer : DbContext
    {
        public NeevDatabaseContainer()
            : base("name=NeevDatabaseContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_GetUserRoles_Result> GetUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserRoles_Result>("GetUserRoles");
        }
    
        public virtual ObjectResult<usp_GetALLInventories_Result> GetALLInventories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetALLInventories_Result>("GetALLInventories");
        }
    
        public virtual int AddProductInventoryItem(Nullable<int> productInventoryID, string productInventoryName, Nullable<int> noOfUnits, Nullable<double> unitPrice, Nullable<int> soldFlag, Nullable<int> returnedFlag)
        {
            var productInventoryIDParameter = productInventoryID.HasValue ?
                new ObjectParameter("ProductInventoryID", productInventoryID) :
                new ObjectParameter("ProductInventoryID", typeof(int));
    
            var productInventoryNameParameter = productInventoryName != null ?
                new ObjectParameter("ProductInventoryName", productInventoryName) :
                new ObjectParameter("ProductInventoryName", typeof(string));
    
            var noOfUnitsParameter = noOfUnits.HasValue ?
                new ObjectParameter("NoOfUnits", noOfUnits) :
                new ObjectParameter("NoOfUnits", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(double));
    
            var soldFlagParameter = soldFlag.HasValue ?
                new ObjectParameter("SoldFlag", soldFlag) :
                new ObjectParameter("SoldFlag", typeof(int));
    
            var returnedFlagParameter = returnedFlag.HasValue ?
                new ObjectParameter("ReturnedFlag", returnedFlag) :
                new ObjectParameter("ReturnedFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProductInventoryItem", productInventoryIDParameter, productInventoryNameParameter, noOfUnitsParameter, unitPriceParameter, soldFlagParameter, returnedFlagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ValidateUser(string userRole, string passCode)
        {
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var passCodeParameter = passCode != null ?
                new ObjectParameter("PassCode", passCode) :
                new ObjectParameter("PassCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ValidateUser", userRoleParameter, passCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetUserActivities_Result> GetUserActivities(Nullable<int> userRoleId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userRoleIdParameter = userRoleId.HasValue ?
                new ObjectParameter("UserRoleId", userRoleId) :
                new ObjectParameter("UserRoleId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserActivities_Result>("GetUserActivities", userRoleIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int DeleteProductInventory(Nullable<int> productInventoryId)
        {
            var productInventoryIdParameter = productInventoryId.HasValue ?
                new ObjectParameter("ProductInventoryId", productInventoryId) :
                new ObjectParameter("ProductInventoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductInventory", productInventoryIdParameter);
        }
    
        public virtual ObjectResult<GetInventoryData_Result> GetInventoryData(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryData_Result>("GetInventoryData", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetExportData_Result> GetExportData(Nullable<int> activityId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetExportData_Result>("GetExportData", activityIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int AddRawMaterialInventoryItem(Nullable<int> rawMaterialInventoryID, string rawMaterialInventoryName, Nullable<int> noOfUnits, Nullable<double> unitPrice, Nullable<int> threshold)
        {
            var rawMaterialInventoryIDParameter = rawMaterialInventoryID.HasValue ?
                new ObjectParameter("RawMaterialInventoryID", rawMaterialInventoryID) :
                new ObjectParameter("RawMaterialInventoryID", typeof(int));
    
            var rawMaterialInventoryNameParameter = rawMaterialInventoryName != null ?
                new ObjectParameter("RawMaterialInventoryName", rawMaterialInventoryName) :
                new ObjectParameter("RawMaterialInventoryName", typeof(string));
    
            var noOfUnitsParameter = noOfUnits.HasValue ?
                new ObjectParameter("NoOfUnits", noOfUnits) :
                new ObjectParameter("NoOfUnits", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(double));
    
            var thresholdParameter = threshold.HasValue ?
                new ObjectParameter("Threshold", threshold) :
                new ObjectParameter("Threshold", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRawMaterialInventoryItem", rawMaterialInventoryIDParameter, rawMaterialInventoryNameParameter, noOfUnitsParameter, unitPriceParameter, thresholdParameter);
        }
    
        public virtual ObjectResult<usp_GetALLRawMaterialInventories_Result> GetALLRawMaterialInventories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetALLRawMaterialInventories_Result>("GetALLRawMaterialInventories");
        }
    
        public virtual ObjectResult<usp_GetALLInventoryItems_Result> GetALLInventoryItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetALLInventoryItems_Result>("GetALLInventoryItems");
        }
    
        public virtual int DeleteProductInventoryItem(Nullable<int> productInventoryTransId)
        {
            var productInventoryTransIdParameter = productInventoryTransId.HasValue ?
                new ObjectParameter("ProductInventoryTransId", productInventoryTransId) :
                new ObjectParameter("ProductInventoryTransId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductInventoryItem", productInventoryTransIdParameter);
        }
    }
}
